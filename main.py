import json
import os
from datetime import datetime, time
from aiogram import Bot, Dispatcher, executor, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from random import choice
from fpdf import FPDF

API_TOKEN = os.getenv("BOT_TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

DATA_FILE = "users_data.json"
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump({}, f)

def load_data():
    with open(DATA_FILE, "r") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def get_today():
    return datetime.now().strftime("%Y-%m-%d")

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = {"days": {}, "start_date": get_today(), "timezone_offset": 0}
        save_data(data)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 30-–¥–Ω–µ–≤–Ω—É—é –∞–Ω—Ç–∏-—Ç—Ä–µ–≤–æ–∂–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –±—É–¥—É –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏—è. –ù–∞–ø–∏—à–∏ /today —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /set_timezone +N –∏–ª–∏ -N (–Ω–∞–ø—Ä–∏–º–µ—Ä, /set_timezone +3 –¥–ª—è –ú–æ—Å–∫–≤—ã).")

@dp.message_handler(commands=["set_timezone"])
async def set_timezone(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_timezone +3 –∏–ª–∏ /set_timezone -5")
        return
    try:
        offset = int(parts[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /set_timezone +2")
        return
    data.setdefault(user_id, {"days": {}, "start_date": get_today()})
    data[user_id]["timezone_offset"] = offset
    save_data(data)
    await message.answer(f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: UTC{offset:+d}")

@dp.message_handler(commands=["today"])
async def today_task(message: types.Message):
    user_id = str(message.from_user.id)
    today = get_today()
    data = load_data()
    data.setdefault(user_id, {"days": {}, "start_date": today})
    if today not in data[user_id]["days"]:
        data[user_id]["days"][today] = {"morning": False, "evening": False}
        save_data(data)

    await message.answer(
        f"üìÖ –î–µ–Ω—å: {today}\n\nüßò –£—Ç—Ä–æ:\n1. –ü–æ–¥—ã—à–∏: –≤–¥–æ—Ö 4—Å ‚Äî –ø–∞—É–∑–∞ 4—Å ‚Äî –≤—ã–¥–æ—Ö 6—Å.\n2. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç—Ä–µ–≤–æ–≥—É?\n3. –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ ‚Äî –Ω–µ–≤–∞–∂–Ω–æ –∫–∞–∫–æ–π, –Ω–æ —Å–¥–µ–ª–∞–π.\n\nüåô –í–µ—á–µ—Ä:\n1. –í—ã–≥—Ä—É–∑–∏ –≤ –∑–∞–º–µ—Ç–∫—É –≤—Å–µ –º—ã—Å–ª–∏.\n2. –û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —à—É–º.\n3. –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ —Å–µ–±—è.\n\n–ù–∞–ø–∏—à–∏ /done_morning –∏–ª–∏ /done_evening –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
    )

@dp.message_handler(commands=["done_morning"])
async def done_morning(message: types.Message):
    user_id = str(message.from_user.id)
    today = get_today()
    data = load_data()
    data.setdefault(user_id, {"days": {}, "start_date": today})
    data[user_id]["days"].setdefault(today, {})["morning"] = True
    save_data(data)
    await message.answer("‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è!")

@dp.message_handler(commands=["done_evening"])
async def done_evening(message: types.Message):
    user_id = str(message.from_user.id)
    today = get_today()
    data = load_data()
    data.setdefault(user_id, {"days": {}, "start_date": today})
    data[user_id]["days"].setdefault(today, {})["evening"] = True
    save_data(data)
    await message.answer("üåô –í–µ—á–µ—Ä–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!")

@dp.message_handler(commands=["stats"])
async def show_stats(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    days = data.get(user_id, {}).get("days", {})
    total = len(days)
    completed = sum(1 for d in days.values() if d.get("morning") and d.get("evening"))
    await message.answer(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é: {completed} –∏–∑ {total} –¥–Ω–µ–π")

@dp.message_handler(commands=["export"])
async def export_pdf(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    days = data.get(user_id, {}).get("days", {})

    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="–û—Ç—á—ë—Ç –ø–æ 30-–¥–Ω–µ–≤–Ω–æ–π –∞–Ω—Ç–∏-—Ç—Ä–µ–≤–æ–∂–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ", ln=True, align="C")
    pdf.ln(10)

    for date, status in sorted(days.items()):
        morning = "‚úÖ" if status.get("morning") else "‚ùå"
        evening = "‚úÖ" if status.get("evening") else "‚ùå"
        pdf.cell(200, 10, txt=f"{date}: –£—Ç—Ä–æ {morning}, –í–µ—á–µ—Ä {evening}", ln=True)

    filename = f"report_{user_id}.pdf"
    pdf.output(filename)

    with open(filename, "rb") as file:
        await bot.send_document(chat_id=message.chat.id, document=file)

    os.remove(filename)

@dp.message_handler(commands=["panic"])
async def panic_tool(message: types.Message):
    anchors = [
        "üî∏ –ù–∞–∑–æ–≤–∏ 3 –ø—Ä–µ–¥–º–µ—Ç–∞ –≤–æ–∫—Ä—É–≥ —Å–µ–±—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–∏–¥–∏—à—å.",
        "üîπ –ü–æ—á—É–≤—Å—Ç–≤—É–π 3 –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –∫–∞—Å–∞–µ—à—å—Å—è.",
        "üî∏ –°–¥–µ–ª–∞–π 3 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤—ã–¥–æ—Ö–∞. –ö–∞–∂–¥—ã–π –¥–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.",
        "üîπ –°–∫–∞–∂–∏ –≤—Å–ª—É—Ö: '–Ø –º–æ–≥—É —Ç—Ä–µ–≤–æ–∂–∏—Ç—å—Å—è –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.'",
        "üî∏ –ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞ –∏ –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ 3 –∑–≤—É–∫–∞–º –≤–æ–∫—Ä—É–≥."
    ]
    await message.answer(f"üõü –Ø–∫–æ—Ä—å –¥–ª—è –∑–∞–∑–µ–º–ª–µ–Ω–∏—è:\n{choice(anchors)}")

def schedule_daily_tasks():
    data = load_data()
    for user_id, user_data in data.items():
        offset = user_data.get("timezone_offset", 0)
        hour = (8 - offset) % 24
        scheduler.add_job(
            lambda uid=user_id: bot.send_message(uid, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–∞–ø–∏—à–∏ /today –∏ –Ω–∞—á–Ω–∏ –¥–µ–Ω—å —Å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —à–∞–≥–∞."),
            CronTrigger(hour=hour, minute=0),
            id=f"reminder_{user_id}",
            replace_existing=True
        )

if __name__ == '__main__':
    schedule_daily_tasks()
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
