import json
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from random import choice

API_TOKEN = os.getenv("BOT_TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

DATA_FILE = "users_data.json"
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump({}, f)

def load_data():
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def get_today():
    return datetime.now().strftime("%Y-%m-%d")

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = {"days": {}, "start_date": get_today()}
        save_data(data)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 30-–¥–Ω–µ–≤–Ω—É—é –∞–Ω—Ç–∏-—Ç—Ä–µ–≤–æ–∂–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –±—É–¥—É –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏—è. –ù–∞–ø–∏—à–∏ /today —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@dp.message_handler(commands=["today"])
async def today_task(message: types.Message):
    user_id = str(message.from_user.id)
    today = get_today()
    data = load_data()
    data.setdefault(user_id, {"days": {}, "start_date": today})
    if today not in data[user_id]["days"]:
        data[user_id]["days"][today] = {"morning": False, "evening": False}
        save_data(data)

    await message.answer(
        f"üìÖ –î–µ–Ω—å: {today}\n\nüßò –£—Ç—Ä–æ:\n1. –ü–æ–¥—ã—à–∏: –≤–¥–æ—Ö 4—Å ‚Äî –ø–∞—É–∑–∞ 4—Å ‚Äî –≤—ã–¥–æ—Ö 6—Å.\n2. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å: —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç—Ä–µ–≤–æ–≥—É?\n3. –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ ‚Äî –Ω–µ–≤–∞–∂–Ω–æ –∫–∞–∫–æ–π, –Ω–æ —Å–¥–µ–ª–∞–π.\n\nüåô –í–µ—á–µ—Ä:\n1. –í—ã–≥—Ä—É–∑–∏ –≤ –∑–∞–º–µ—Ç–∫—É –≤—Å–µ –º—ã—Å–ª–∏.\n2. –û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —à—É–º.\n3. –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ —Å–µ–±—è.\n\n–ù–∞–ø–∏—à–∏ /done_morning –∏–ª–∏ /done_evening –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
    )

@dp.message_handler(commands=["done_morning"])
async def done_morning(message: types.Message):
    user_id = str(message.from_user.id)
    today = get_today()
    data = load_data()
    data.setdefault(user_id, {"days": {}, "start_date": today})
    data[user_id]["days"].setdefault(today, {})["morning"] = True
    save_data(data)
    await message.answer("‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è!")

@dp.message_handler(commands=["done_evening"])
async def done_evening(message: types.Message):
    user_id = str(message.from_user.id)
    today = get_today()
    data = load_data()
    data.setdefault(user_id, {"days": {}, "start_date": today})
    data[user_id]["days"].setdefault(today, {})["evening"] = True
    save_data(data)
    await message.answer("üåô –í–µ—á–µ—Ä–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!")

@dp.message_handler(commands=["stats"])
async def show_stats(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    days = data.get(user_id, {}).get("days", {})
    total = len(days)
    completed = sum(1 for d in days.values() if d.get("morning") and d.get("evening"))
    await message.answer(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é: {completed} –∏–∑ {total} –¥–Ω–µ–π")

@dp.message_handler(commands=["panic"])
async def panic_tool(message: types.Message):
    anchors = [
        "üî∏ –ù–∞–∑–æ–≤–∏ 3 –ø—Ä–µ–¥–º–µ—Ç–∞ –≤–æ–∫—Ä—É–≥ —Å–µ–±—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–∏–¥–∏—à—å.",
        "üîπ –ü–æ—á—É–≤—Å—Ç–≤—É–π 3 –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –∫–∞—Å–∞–µ—à—å—Å—è.",
        "üî∏ –°–¥–µ–ª–∞–π 3 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤—ã–¥–æ—Ö–∞. –ö–∞–∂–¥—ã–π –¥–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.",
        "üîπ –°–∫–∞–∂–∏ –≤—Å–ª—É—Ö: '–Ø –º–æ–≥—É —Ç—Ä–µ–≤–æ–∂–∏—Ç—å—Å—è –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.'",
        "üî∏ –ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞ –∏ –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ 3 –∑–≤—É–∫–∞–º –≤–æ–∫—Ä—É–≥."
    ]
    await message.answer(f"üõü –Ø–∫–æ—Ä—å –¥–ª—è –∑–∞–∑–µ–º–ª–µ–Ω–∏—è:\n{choice(anchors)}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
